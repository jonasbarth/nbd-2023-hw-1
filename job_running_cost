#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 18 15:34:00 2023

@author: giacomo
"""
import numpy as np
from tqdm import tqdm

import fat_tree
from plot import plot_job_running_cost
from plot import plot_job_running_cost_t
from response_time import simulate_fat_tree_response_time, TopologySimulation

"""
Need to import the module with the simulate response time
"""

def simulate_job_running_cost(n_servers, n_simulations, sim, tree):
    """
    According to the formula, in order to extract the expected value of the 
    response time and of theta, the function does a simulation in which it 
    uses the simulate_response_time function to calculate the response time and 
    it calculate the value of theta (sum of the times that all N servers are
    used to run their respective tasks). After that it extracts the mean and it
    returns the job running cost. 
    
    """
    # sample job running times for all simulations
    exec_times = np.random.exponential(expected_job_time_s / n_servers, n_servers * n_simulations) + sim.fixed_job_time_s
    exec_times = np.reshape(exec_times, (n_simulations, n_servers))

    # get the sum of job running cost for each simulation
    exec_times = np.sum(exec_times, axis=1)
    expected_exec_time = np.mean(exec_times)

    expected_response_time = np.mean([simulate_fat_tree_response_time(sim, tree) for _ in range(n_simulations)])

    job_running_cost = expected_response_time + xi * expected_exec_time
    
    return job_running_cost
        

if __name__ == "__main__":

    N = 10000
    n = 64
    tau_s = 0.000005
    capacity_gbit = 10
    expected_job_time_s = 8 * 3600
    fixed_job_time_s = 30
    input_file_size_gb = 4000
    output_file_size_gb = 4000
    xi = 0.1
    overhead = 1 + 48 / 1500

    baseline = (expected_job_time_s + fixed_job_time_s) + (xi * expected_job_time_s)

    tree = fat_tree.FatTree(n, tau_s, capacity_gbit)
    job_costs = []

    servers = range(1, N + 1, 10)

    for n_servers in tqdm(servers):
        sim = TopologySimulation(n_servers, tau_s, capacity_gbit, expected_job_time_s, fixed_job_time_s,
                                 input_file_size_gb,
                                 output_file_size_gb, overhead)

        job_cost = simulate_job_running_cost(n_servers, 10, sim, tree)
        
        job_costs.append(job_cost)

    """
    Point 4: Numerical value of the optimal number of servers (minimizing the job
            job running cost)
    """
    
    min_job_cost = np.min(job_costs)
    idx = np.where(job_costs == min_job_cost)[0][0]
    opt_number = [list(servers)[idx]]

    """
    Plots
    """

    fig, _ = plot_job_running_cost(servers, np.array(job_costs) / baseline)
    fig.savefig("img/job_running_cost.jpg", format="jpg")

    fig2, _2 = plot_job_running_cost_t(servers, costs = [np.array(job_costs) / baseline], labels = ["Fat Tree"],opt_n=opt_number)
    fig2.savefig("img/job_running_cost2.jpg", format="jpg")